<!DOCTYPE html>
<html>
  <head>
    <title>RealtimeSearchApp</title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= stylesheet_link_tag "application", "data-turbo-track": "reload" %>
    <%= javascript_importmap_tags %>

  <!-- Include jQuery for simplicity -->
  <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
  
  <style>
    body {
      text-align: center;
    }

    #searchBar {
      margin-top: 20px;
    }

    #searchResults {
      margin-top: 10px;
    }
  </style>
</head>
<body>
  <div id="searchBar">
    <input type="text" id="searchBox" placeholder="Search..." oninput="handleSearch()">
  </div>

  <div id="searchResults"></div>

  <script>
  let typingTimer;
  let previousSearchQuery = '';
  const searchBox = $('#searchBox');

  function handleSearch() {
    clearTimeout(typingTimer);
    typingTimer = setTimeout(sendSearchQuery, 500);
  }

  function sendSearchQuery() {
    const searchQuery = searchBox.val().trim();

    if (searchQuery !== "") {
      // Check if the current search is a continuation of the previous one
      if (searchQuery.startsWith(previousSearchQuery)) {
        // Update the previous search query
        previousSearchQuery = searchQuery;
        // Update the display if needed
        displaySearchResult(searchQuery);
      } else {
        // Send the searchQuery to the backend for logging
        logSearch(searchQuery);

        // Analyze the search query for completeness
        analyzeSearchQuery(searchQuery);

        // Update the previous search query
        previousSearchQuery = searchQuery;
      }
    }
  }

  function displaySearchResult(query) {
    const searchResultsDiv = $('#searchResults');
    searchResultsDiv.html(`<p>${query}</p>`);
  }

  function logSearch(query) {
    // Send an AJAX request or use a WebSocket to log the search query on the backend
    // You can include user-specific information (e.g., IP) in the request
    $.post('/search', { query: query });
  }

  // Function to check if a string is a complete sentence
  function isCompleteSentence(sentence) {
    return sentence.trim().endsWith('.') || sentence.trim().endsWith('!') || sentence.trim().endsWith('?');
  }

  // Function to analyze search queries
  function analyzeSearchQuery(searchQuery) {
    // Check if the search query is a complete sentence
    if (isCompleteSentence(searchQuery)) {
      // Log the complete sentence
      console.log(`User searched for: "${searchQuery}"`);
    } else {
      // Handle incomplete sentences or other criteria as needed
      console.log(`Incomplete search query: "${searchQuery}"`);
    }
  }
</script>
</body>
</html>
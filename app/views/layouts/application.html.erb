<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RealtimeSearchApp</title>
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>
    <%= stylesheet_link_tag "application", "data-turbo-track": "reload" %>
    <%= javascript_importmap_tags %>

    <!-- Include jQuery for simplicity -->
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>

    <style>
      body {
        text-align: center;
      }

      #searchBar {
        margin-top: 20px;
      }

      #searchResults {
        margin-top: 10px;
      }
    </style>
  </head>
  <body>
    <div id="searchBar">
      <input type="text" id="searchBox" placeholder="Search..." oninput="handleSearch()">
    </div>

    <div id="searchResults"></div>

    <script>
      let typingTimer;
      let previousSearchQuery = '';
      const searchBox = $('#searchBox');
      const searchResultsDiv = $('#searchResults');

      function handleSearch() {
        clearTimeout(typingTimer);
        typingTimer = setTimeout(sendSearchQuery, 15);
      }

      function sendSearchQuery() {
        const searchQuery = searchBox.val().trim();

        if (searchQuery !== "") {
          // Analyze the search query for completeness
          analyzeSearchQuery(searchQuery);

          // Check if the current search is a continuation of the previous one
          if (searchQuery.startsWith(previousSearchQuery)) {
            // Update the previous search query
            previousSearchQuery = searchQuery;
            // Update the display if needed
            displaySearchResult(searchQuery);
          } else {
            // Only send the searchQuery to the backend if it's a valid question
            if (isCompleteSentence(searchQuery)) {
              logSearch(searchQuery);
            }

            // Update the previous search query
            previousSearchQuery = searchQuery;
          }
        }
      }

      function displaySearchResult(query) {
        searchResultsDiv.html(`<p>${query}</p>`);
      }

      function logSearch(query) {
        // Send an AJAX request or use a WebSocket to log the search query on the backend
        // You can include user-specific information (e.g., IP) in the request
        $.post('/search', { query: query });
      }

      // Function to check if a string is a complete sentence
      function isCompleteSentence(sentence) {
        return sentence.trim().endsWith('.') || sentence.trim().endsWith('!') || sentence.trim().endsWith('?');
      }

      // Function to analyze search queries
function analyzeSearchQuery(searchQuery) {
  // Check for basic sentence completeness
  if (isCompleteSentence(searchQuery)) {
    console.log(`User searched for: "${searchQuery}"`);
    logSearch(searchQuery); // Send valid question to backend
  } else {
    // Apply more sophisticated checks for completeness
    const isComplete = checkCompletenessUsingLanguageProcessing(searchQuery);
    if (isComplete) {
      console.log(`User searched for: "${searchQuery}"`);
      logSearch(searchQuery); // Send valid question to backend
    } else {
      console.log(`Incomplete search query: "${searchQuery}"`);
    }
  }
}
// Function to check for completeness using language processing (replace with actual implementation)
function checkCompletenessUsingLanguageProcessing(sentence) {
  // Implement logic using a language processing library or API
  // Consider factors like context, grammar, meaning, etc.
  // Return true if the sentence is considered complete, false otherwise
}

      // Example usage
      const userSearches = [
        "how to learn JavaScript.",
        "best programming courses",
        "JavaScript frameworks",
        "machine learning tutorials?"
      ];

      // Corrected function name to analyzeSearchQuery
      for (const searchQuery of userSearches) {
        analyzeSearchQuery(searchQuery);
      }
    </script>
  </body>
</html>
